{"ast":null,"code":"import VMasker from \"vanilla-masker\"; // eslint-disable-next-line consistent-return\n\nfunction masks(text, type) {\n  switch (type) {\n    case \"cep\":\n      return VMasker.toPattern(text, \"99999-999\");\n\n    case \"cpf\":\n      return VMasker.toPattern(text, \"999.999.999-99\");\n\n    case \"date\":\n      return VMasker.toPattern(text, \"99/99/9999\");\n\n    case \"tel\":\n      {\n        const telMask = [\"(99) 9999-9999\", \"(99) 99999-9999\"];\n        const numbers = text.replace(/\\D/g, \"\");\n        return VMasker.toPattern(numbers, numbers.length > 10 ? telMask[1] : telMask[0]);\n      }\n\n    default:\n  }\n}\n\nexport default masks;","map":{"version":3,"sources":["/home/fabio/julia/projeto15/repoprovas/RepoProvas/src/utils/masks.js"],"names":["VMasker","masks","text","type","toPattern","telMask","numbers","replace","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2B;AACzB,UAAQA,IAAR;AACE,SAAK,KAAL;AACE,aAAOH,OAAO,CAACI,SAAR,CAAkBF,IAAlB,EAAwB,WAAxB,CAAP;;AACF,SAAK,KAAL;AACE,aAAOF,OAAO,CAACI,SAAR,CAAkBF,IAAlB,EAAwB,gBAAxB,CAAP;;AACF,SAAK,MAAL;AACE,aAAOF,OAAO,CAACI,SAAR,CAAkBF,IAAlB,EAAwB,YAAxB,CAAP;;AACF,SAAK,KAAL;AAAY;AACV,cAAMG,OAAO,GAAG,CAAC,gBAAD,EAAmB,iBAAnB,CAAhB;AACA,cAAMC,OAAO,GAAGJ,IAAI,CAACK,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAhB;AACA,eAAOP,OAAO,CAACI,SAAR,CACLE,OADK,EAELA,OAAO,CAACE,MAAR,GAAiB,EAAjB,GAAsBH,OAAO,CAAC,CAAD,CAA7B,GAAmCA,OAAO,CAAC,CAAD,CAFrC,CAAP;AAID;;AACD;AAfF;AAiBD;;AAED,eAAeJ,KAAf","sourcesContent":["import VMasker from \"vanilla-masker\";\n\n// eslint-disable-next-line consistent-return\nfunction masks(text, type) {\n  switch (type) {\n    case \"cep\":\n      return VMasker.toPattern(text, \"99999-999\");\n    case \"cpf\":\n      return VMasker.toPattern(text, \"999.999.999-99\");\n    case \"date\":\n      return VMasker.toPattern(text, \"99/99/9999\");\n    case \"tel\": {\n      const telMask = [\"(99) 9999-9999\", \"(99) 99999-9999\"];\n      const numbers = text.replace(/\\D/g, \"\");\n      return VMasker.toPattern(\n        numbers,\n        numbers.length > 10 ? telMask[1] : telMask[0]\n      );\n    }\n    default:\n  }\n}\n\nexport default masks;\n"]},"metadata":{},"sourceType":"module"}